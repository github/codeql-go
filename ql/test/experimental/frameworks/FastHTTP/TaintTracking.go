// Code generated by https://github.com/gagliardetto. DO NOT EDIT.

package main

import (
	"bufio"
	"io"
	"mime/multipart"
	"net"

	"github.com/valyala/fasthttp"
)

// Package github.com/valyala/fasthttp@v1.23.0
func TaintTracking_GithubComValyalaFasthttpV1230() {
	// Taint-tracking through functions.
	{
		// func AppendBrotliBytes(dst []byte, src []byte) []byte
		{
			{
				fromByte656 := source().([]byte)
				var intoByte414 []byte
				fasthttp.AppendBrotliBytes(intoByte414, fromByte656)
				sink(intoByte414) // $taintSink
			}
			{
				fromByte518 := source().([]byte)
				intoByte650 := fasthttp.AppendBrotliBytes(nil, fromByte518)
				sink(intoByte650) // $taintSink
			}
			{
				fromByte784 := source().([]byte)
				intoByte957 := fasthttp.AppendBrotliBytes(fromByte784, nil)
				sink(intoByte957) // $taintSink
			}
		}
		// func AppendBrotliBytesLevel(dst []byte, src []byte, level int) []byte
		{
			{
				fromByte520 := source().([]byte)
				var intoByte443 []byte
				fasthttp.AppendBrotliBytesLevel(intoByte443, fromByte520, 0)
				sink(intoByte443) // $taintSink
			}
			{
				fromByte127 := source().([]byte)
				intoByte483 := fasthttp.AppendBrotliBytesLevel(nil, fromByte127, 0)
				sink(intoByte483) // $taintSink
			}
			{
				fromByte989 := source().([]byte)
				intoByte982 := fasthttp.AppendBrotliBytesLevel(fromByte989, nil, 0)
				sink(intoByte982) // $taintSink
			}
		}
		// func AppendDeflateBytes(dst []byte, src []byte) []byte
		{
			{
				fromByte417 := source().([]byte)
				var intoByte584 []byte
				fasthttp.AppendDeflateBytes(intoByte584, fromByte417)
				sink(intoByte584) // $taintSink
			}
			{
				fromByte991 := source().([]byte)
				intoByte881 := fasthttp.AppendDeflateBytes(nil, fromByte991)
				sink(intoByte881) // $taintSink
			}
			{
				fromByte186 := source().([]byte)
				intoByte284 := fasthttp.AppendDeflateBytes(fromByte186, nil)
				sink(intoByte284) // $taintSink
			}
		}
		// func AppendDeflateBytesLevel(dst []byte, src []byte, level int) []byte
		{
			{
				fromByte908 := source().([]byte)
				var intoByte137 []byte
				fasthttp.AppendDeflateBytesLevel(intoByte137, fromByte908, 0)
				sink(intoByte137) // $taintSink
			}
			{
				fromByte494 := source().([]byte)
				intoByte873 := fasthttp.AppendDeflateBytesLevel(nil, fromByte494, 0)
				sink(intoByte873) // $taintSink
			}
			{
				fromByte599 := source().([]byte)
				intoByte409 := fasthttp.AppendDeflateBytesLevel(fromByte599, nil, 0)
				sink(intoByte409) // $taintSink
			}
		}
		// func AppendGunzipBytes(dst []byte, src []byte) ([]byte, error)
		{
			{
				fromByte246 := source().([]byte)
				var intoByte898 []byte
				fasthttp.AppendGunzipBytes(intoByte898, fromByte246)
				sink(intoByte898) // $taintSink
			}
			{
				fromByte598 := source().([]byte)
				intoByte631, _ := fasthttp.AppendGunzipBytes(nil, fromByte598)
				sink(intoByte631) // $taintSink
			}
			{
				fromByte165 := source().([]byte)
				intoByte150, _ := fasthttp.AppendGunzipBytes(fromByte165, nil)
				sink(intoByte150) // $taintSink
			}
		}
		// func AppendGzipBytes(dst []byte, src []byte) []byte
		{
			{
				fromByte340 := source().([]byte)
				var intoByte471 []byte
				fasthttp.AppendGzipBytes(intoByte471, fromByte340)
				sink(intoByte471) // $taintSink
			}
			{
				fromByte290 := source().([]byte)
				intoByte758 := fasthttp.AppendGzipBytes(nil, fromByte290)
				sink(intoByte758) // $taintSink
			}
			{
				fromByte396 := source().([]byte)
				intoByte707 := fasthttp.AppendGzipBytes(fromByte396, nil)
				sink(intoByte707) // $taintSink
			}
		}
		// func AppendGzipBytesLevel(dst []byte, src []byte, level int) []byte
		{
			{
				fromByte912 := source().([]byte)
				var intoByte718 []byte
				fasthttp.AppendGzipBytesLevel(intoByte718, fromByte912, 0)
				sink(intoByte718) // $taintSink
			}
			{
				fromByte972 := source().([]byte)
				intoByte633 := fasthttp.AppendGzipBytesLevel(nil, fromByte972, 0)
				sink(intoByte633) // $taintSink
			}
			{
				fromByte316 := source().([]byte)
				intoByte145 := fasthttp.AppendGzipBytesLevel(fromByte316, nil, 0)
				sink(intoByte145) // $taintSink
			}
		}
		// func AppendHTMLEscape(dst []byte, s string) []byte
		{
			{
				fromString817 := source().(string)
				var intoByte474 []byte
				fasthttp.AppendHTMLEscape(intoByte474, fromString817)
				sink(intoByte474) // $taintSink
			}
			{
				fromString832 := source().(string)
				intoByte378 := fasthttp.AppendHTMLEscape(nil, fromString832)
				sink(intoByte378) // $taintSink
			}
			{
				fromByte541 := source().([]byte)
				intoByte139 := fasthttp.AppendHTMLEscape(fromByte541, "")
				sink(intoByte139) // $taintSink
			}
		}
		// func AppendHTMLEscapeBytes(dst []byte, s []byte) []byte
		{
			{
				fromByte814 := source().([]byte)
				var intoByte768 []byte
				fasthttp.AppendHTMLEscapeBytes(intoByte768, fromByte814)
				sink(intoByte768) // $taintSink
			}
			{
				fromByte468 := source().([]byte)
				intoByte736 := fasthttp.AppendHTMLEscapeBytes(nil, fromByte468)
				sink(intoByte736) // $taintSink
			}
			{
				fromByte516 := source().([]byte)
				intoByte246 := fasthttp.AppendHTMLEscapeBytes(fromByte516, nil)
				sink(intoByte246) // $taintSink
			}
		}
		// func AppendInflateBytes(dst []byte, src []byte) ([]byte, error)
		{
			{
				fromByte679 := source().([]byte)
				var intoByte736 []byte
				fasthttp.AppendInflateBytes(intoByte736, fromByte679)
				sink(intoByte736) // $taintSink
			}
			{
				fromByte839 := source().([]byte)
				intoByte273, _ := fasthttp.AppendInflateBytes(nil, fromByte839)
				sink(intoByte273) // $taintSink
			}
			{
				fromByte982 := source().([]byte)
				intoByte458, _ := fasthttp.AppendInflateBytes(fromByte982, nil)
				sink(intoByte458) // $taintSink
			}
		}
		// func AppendNormalizedHeaderKey(dst []byte, key string) []byte
		{
			{
				fromString506 := source().(string)
				var intoByte213 []byte
				fasthttp.AppendNormalizedHeaderKey(intoByte213, fromString506)
				sink(intoByte213) // $taintSink
			}
			{
				fromString468 := source().(string)
				intoByte219 := fasthttp.AppendNormalizedHeaderKey(nil, fromString468)
				sink(intoByte219) // $taintSink
			}
			{
				fromByte265 := source().([]byte)
				intoByte971 := fasthttp.AppendNormalizedHeaderKey(fromByte265, "")
				sink(intoByte971) // $taintSink
			}
		}
		// func AppendNormalizedHeaderKeyBytes(dst []byte, key []byte) []byte
		{
			{
				fromByte320 := source().([]byte)
				var intoByte545 []byte
				fasthttp.AppendNormalizedHeaderKeyBytes(intoByte545, fromByte320)
				sink(intoByte545) // $taintSink
			}
			{
				fromByte566 := source().([]byte)
				intoByte497 := fasthttp.AppendNormalizedHeaderKeyBytes(nil, fromByte566)
				sink(intoByte497) // $taintSink
			}
			{
				fromByte274 := source().([]byte)
				intoByte783 := fasthttp.AppendNormalizedHeaderKeyBytes(fromByte274, nil)
				sink(intoByte783) // $taintSink
			}
		}
		// func AppendQuotedArg(dst []byte, src []byte) []byte
		{
			{
				fromByte905 := source().([]byte)
				var intoByte389 []byte
				fasthttp.AppendQuotedArg(intoByte389, fromByte905)
				sink(intoByte389) // $taintSink
			}
			{
				fromByte198 := source().([]byte)
				intoByte477 := fasthttp.AppendQuotedArg(nil, fromByte198)
				sink(intoByte477) // $taintSink
			}
			{
				fromByte544 := source().([]byte)
				intoByte382 := fasthttp.AppendQuotedArg(fromByte544, nil)
				sink(intoByte382) // $taintSink
			}
		}
		// func AppendUnbrotliBytes(dst []byte, src []byte) ([]byte, error)
		{
			{
				fromByte715 := source().([]byte)
				var intoByte179 []byte
				fasthttp.AppendUnbrotliBytes(intoByte179, fromByte715)
				sink(intoByte179) // $taintSink
			}
			{
				fromByte366 := source().([]byte)
				intoByte648, _ := fasthttp.AppendUnbrotliBytes(nil, fromByte366)
				sink(intoByte648) // $taintSink
			}
			{
				fromByte544 := source().([]byte)
				intoByte484, _ := fasthttp.AppendUnbrotliBytes(fromByte544, nil)
				sink(intoByte484) // $taintSink
			}
		}
		// func AppendUnquotedArg(dst []byte, src []byte) []byte
		{
			{
				fromByte824 := source().([]byte)
				var intoByte754 []byte
				fasthttp.AppendUnquotedArg(intoByte754, fromByte824)
				sink(intoByte754) // $taintSink
			}
			{
				fromByte680 := source().([]byte)
				intoByte722 := fasthttp.AppendUnquotedArg(nil, fromByte680)
				sink(intoByte722) // $taintSink
			}
			{
				fromByte506 := source().([]byte)
				intoByte121 := fasthttp.AppendUnquotedArg(fromByte506, nil)
				sink(intoByte121) // $taintSink
			}
		}
		// func WriteBrotli(w io.Writer, p []byte) (int, error)
		{
			fromByte293 := source().([]byte)
			var intoWriter151 io.Writer
			fasthttp.WriteBrotli(intoWriter151, fromByte293)
			sink(intoWriter151) // $taintSink
		}
		// func WriteBrotliLevel(w io.Writer, p []byte, level int) (int, error)
		{
			fromByte849 := source().([]byte)
			var intoWriter322 io.Writer
			fasthttp.WriteBrotliLevel(intoWriter322, fromByte849, 0)
			sink(intoWriter322) // $taintSink
		}
		// func WriteDeflate(w io.Writer, p []byte) (int, error)
		{
			fromByte339 := source().([]byte)
			var intoWriter478 io.Writer
			fasthttp.WriteDeflate(intoWriter478, fromByte339)
			sink(intoWriter478) // $taintSink
		}
		// func WriteDeflateLevel(w io.Writer, p []byte, level int) (int, error)
		{
			fromByte399 := source().([]byte)
			var intoWriter426 io.Writer
			fasthttp.WriteDeflateLevel(intoWriter426, fromByte399, 0)
			sink(intoWriter426) // $taintSink
		}
		// func WriteGunzip(w io.Writer, p []byte) (int, error)
		{
			fromByte628 := source().([]byte)
			var intoWriter197 io.Writer
			fasthttp.WriteGunzip(intoWriter197, fromByte628)
			sink(intoWriter197) // $taintSink
		}
		// func WriteGzip(w io.Writer, p []byte) (int, error)
		{
			fromByte216 := source().([]byte)
			var intoWriter742 io.Writer
			fasthttp.WriteGzip(intoWriter742, fromByte216)
			sink(intoWriter742) // $taintSink
		}
		// func WriteGzipLevel(w io.Writer, p []byte, level int) (int, error)
		{
			fromByte906 := source().([]byte)
			var intoWriter620 io.Writer
			fasthttp.WriteGzipLevel(intoWriter620, fromByte906, 0)
			sink(intoWriter620) // $taintSink
		}
		// func WriteInflate(w io.Writer, p []byte) (int, error)
		{
			fromByte158 := source().([]byte)
			var intoWriter353 io.Writer
			fasthttp.WriteInflate(intoWriter353, fromByte158)
			sink(intoWriter353) // $taintSink
		}
		// func WriteMultipartForm(w io.Writer, f *mime/multipart.Form, boundary string) error
		{
			{
				fromForm625 := source().(*multipart.Form)
				var intoWriter340 io.Writer
				fasthttp.WriteMultipartForm(intoWriter340, fromForm625, "")
				sink(intoWriter340) // $taintSink
			}
			{
				fromString741 := source().(string)
				var intoWriter199 io.Writer
				fasthttp.WriteMultipartForm(intoWriter199, nil, fromString741)
				sink(intoWriter199) // $taintSink
			}
		}
		// func WriteUnbrotli(w io.Writer, p []byte) (int, error)
		{
			fromByte873 := source().([]byte)
			var intoWriter304 io.Writer
			fasthttp.WriteUnbrotli(intoWriter304, fromByte873)
			sink(intoWriter304) // $taintSink
		}
	}
	// Taint-tracking through method calls.
	{
		// Taint-tracking through method calls on github.com/valyala/fasthttp.Args.
		{
			// func (*Args).Add(key string, value string)
			{
				{
					fromString262 := source().(string)
					var intoArgs341 fasthttp.Args
					intoArgs341.Add(fromString262, "")
					sink(intoArgs341) // $taintSink
				}
				{
					fromString495 := source().(string)
					var intoArgs976 fasthttp.Args
					intoArgs976.Add("", fromString495)
					sink(intoArgs976) // $taintSink
				}
			}
			// func (*Args).AddBytesK(key []byte, value string)
			{
				{
					fromByte194 := source().([]byte)
					var intoArgs736 fasthttp.Args
					intoArgs736.AddBytesK(fromByte194, "")
					sink(intoArgs736) // $taintSink
				}
				{
					fromString870 := source().(string)
					var intoArgs741 fasthttp.Args
					intoArgs741.AddBytesK(nil, fromString870)
					sink(intoArgs741) // $taintSink
				}
			}
			// func (*Args).AddBytesKNoValue(key []byte)
			{
				fromByte653 := source().([]byte)
				var intoArgs937 fasthttp.Args
				intoArgs937.AddBytesKNoValue(fromByte653)
				sink(intoArgs937) // $taintSink
			}
			// func (*Args).AddBytesKV(key []byte, value []byte)
			{
				{
					fromByte996 := source().([]byte)
					var intoArgs198 fasthttp.Args
					intoArgs198.AddBytesKV(fromByte996, nil)
					sink(intoArgs198) // $taintSink
				}
				{
					fromByte481 := source().([]byte)
					var intoArgs981 fasthttp.Args
					intoArgs981.AddBytesKV(nil, fromByte481)
					sink(intoArgs981) // $taintSink
				}
			}
			// func (*Args).AddBytesV(key string, value []byte)
			{
				{
					fromString788 := source().(string)
					var intoArgs493 fasthttp.Args
					intoArgs493.AddBytesV(fromString788, nil)
					sink(intoArgs493) // $taintSink
				}
				{
					fromByte298 := source().([]byte)
					var intoArgs852 fasthttp.Args
					intoArgs852.AddBytesV("", fromByte298)
					sink(intoArgs852) // $taintSink
				}
			}
			// func (*Args).AddNoValue(key string)
			{
				fromString771 := source().(string)
				var intoArgs246 fasthttp.Args
				intoArgs246.AddNoValue(fromString771)
				sink(intoArgs246) // $taintSink
			}
			// func (*Args).AppendBytes(dst []byte) []byte
			{
				{
					fromArgs988 := source().(fasthttp.Args)
					var intoByte941 []byte
					fromArgs988.AppendBytes(intoByte941)
					sink(intoByte941) // $taintSink
				}
				{
					fromArgs474 := source().(fasthttp.Args)
					intoByte532 := fromArgs474.AppendBytes(nil)
					sink(intoByte532) // $taintSink
				}
				{
					fromByte215 := source().([]byte)
					var mediumObjCQL fasthttp.Args
					intoByte113 := mediumObjCQL.AppendBytes(fromByte215)
					sink(intoByte113) // $taintSink
				}
			}
			// func (*Args).CopyTo(dst *Args)
			{
				fromArgs375 := source().(fasthttp.Args)
				var intoArgs582 *fasthttp.Args
				fromArgs375.CopyTo(intoArgs582)
				sink(intoArgs582) // $taintSink
			}
			// func (*Args).Parse(s string)
			{
				fromString351 := source().(string)
				var intoArgs938 fasthttp.Args
				intoArgs938.Parse(fromString351)
				sink(intoArgs938) // $taintSink
			}
			// func (*Args).ParseBytes(b []byte)
			{
				fromByte643 := source().([]byte)
				var intoArgs979 fasthttp.Args
				intoArgs979.ParseBytes(fromByte643)
				sink(intoArgs979) // $taintSink
			}
			// func (*Args).Peek(key string) []byte
			{
				fromArgs551 := source().(fasthttp.Args)
				intoByte182 := fromArgs551.Peek("")
				sink(intoByte182) // $taintSink
			}
			// func (*Args).PeekBytes(key []byte) []byte
			{
				fromArgs275 := source().(fasthttp.Args)
				intoByte665 := fromArgs275.PeekBytes(nil)
				sink(intoByte665) // $taintSink
			}
			// func (*Args).PeekMulti(key string) [][]byte
			{
				fromArgs938 := source().(fasthttp.Args)
				intoByte299 := fromArgs938.PeekMulti("")
				sink(intoByte299) // $taintSink
			}
			// func (*Args).PeekMultiBytes(key []byte) [][]byte
			{
				fromArgs223 := source().(fasthttp.Args)
				intoByte862 := fromArgs223.PeekMultiBytes(nil)
				sink(intoByte862) // $taintSink
			}
			// func (*Args).QueryString() []byte
			{
				fromArgs619 := source().(fasthttp.Args)
				intoByte835 := fromArgs619.QueryString()
				sink(intoByte835) // $taintSink
			}
			// func (*Args).Set(key string, value string)
			{
				{
					fromString344 := source().(string)
					var intoArgs790 fasthttp.Args
					intoArgs790.Set(fromString344, "")
					sink(intoArgs790) // $taintSink
				}
				{
					fromString816 := source().(string)
					var intoArgs657 fasthttp.Args
					intoArgs657.Set("", fromString816)
					sink(intoArgs657) // $taintSink
				}
			}
			// func (*Args).SetBytesK(key []byte, value string)
			{
				{
					fromByte721 := source().([]byte)
					var intoArgs425 fasthttp.Args
					intoArgs425.SetBytesK(fromByte721, "")
					sink(intoArgs425) // $taintSink
				}
				{
					fromString454 := source().(string)
					var intoArgs846 fasthttp.Args
					intoArgs846.SetBytesK(nil, fromString454)
					sink(intoArgs846) // $taintSink
				}
			}
			// func (*Args).SetBytesKNoValue(key []byte)
			{
				fromByte289 := source().([]byte)
				var intoArgs225 fasthttp.Args
				intoArgs225.SetBytesKNoValue(fromByte289)
				sink(intoArgs225) // $taintSink
			}
			// func (*Args).SetBytesKV(key []byte, value []byte)
			{
				{
					fromByte981 := source().([]byte)
					var intoArgs630 fasthttp.Args
					intoArgs630.SetBytesKV(fromByte981, nil)
					sink(intoArgs630) // $taintSink
				}
				{
					fromByte789 := source().([]byte)
					var intoArgs567 fasthttp.Args
					intoArgs567.SetBytesKV(nil, fromByte789)
					sink(intoArgs567) // $taintSink
				}
			}
			// func (*Args).SetBytesV(key string, value []byte)
			{
				{
					fromString822 := source().(string)
					var intoArgs751 fasthttp.Args
					intoArgs751.SetBytesV(fromString822, nil)
					sink(intoArgs751) // $taintSink
				}
				{
					fromByte549 := source().([]byte)
					var intoArgs189 fasthttp.Args
					intoArgs189.SetBytesV("", fromByte549)
					sink(intoArgs189) // $taintSink
				}
			}
			// func (*Args).SetNoValue(key string)
			{
				fromString878 := source().(string)
				var intoArgs399 fasthttp.Args
				intoArgs399.SetNoValue(fromString878)
				sink(intoArgs399) // $taintSink
			}
			// func (*Args).String() string
			{
				fromArgs407 := source().(fasthttp.Args)
				intoString625 := fromArgs407.String()
				sink(intoString625) // $taintSink
			}
			// func (*Args).WriteTo(w io.Writer) (int64, error)
			{
				fromArgs472 := source().(fasthttp.Args)
				var intoWriter966 io.Writer
				fromArgs472.WriteTo(intoWriter966)
				sink(intoWriter966) // $taintSink
			}
		}
		// Taint-tracking through method calls on github.com/valyala/fasthttp.Cookie.
		{
			// func (*Cookie).AppendBytes(dst []byte) []byte
			{
				{
					fromCookie522 := source().(fasthttp.Cookie)
					var intoByte590 []byte
					fromCookie522.AppendBytes(intoByte590)
					sink(intoByte590) // $taintSink
				}
				{
					fromCookie445 := source().(fasthttp.Cookie)
					intoByte912 := fromCookie445.AppendBytes(nil)
					sink(intoByte912) // $taintSink
				}
				{
					fromByte763 := source().([]byte)
					var mediumObjCQL fasthttp.Cookie
					intoByte702 := mediumObjCQL.AppendBytes(fromByte763)
					sink(intoByte702) // $taintSink
				}
			}
			// func (*Cookie).Cookie() []byte
			{
				fromCookie959 := source().(fasthttp.Cookie)
				intoByte726 := fromCookie959.Cookie()
				sink(intoByte726) // $taintSink
			}
			// func (*Cookie).CopyTo(src *Cookie)
			{
				fromCookie909 := source().(*fasthttp.Cookie)
				var intoCookie951 fasthttp.Cookie
				intoCookie951.CopyTo(fromCookie909)
				sink(intoCookie951) // $taintSink
			}
			// func (*Cookie).Domain() []byte
			{
				fromCookie358 := source().(fasthttp.Cookie)
				intoByte505 := fromCookie358.Domain()
				sink(intoByte505) // $taintSink
			}
			// func (*Cookie).Key() []byte
			{
				fromCookie980 := source().(fasthttp.Cookie)
				intoByte833 := fromCookie980.Key()
				sink(intoByte833) // $taintSink
			}
			// func (*Cookie).Parse(src string) error
			{
				fromString428 := source().(string)
				var intoCookie351 fasthttp.Cookie
				intoCookie351.Parse(fromString428)
				sink(intoCookie351) // $taintSink
			}
			// func (*Cookie).ParseBytes(src []byte) error
			{
				fromByte567 := source().([]byte)
				var intoCookie451 fasthttp.Cookie
				intoCookie451.ParseBytes(fromByte567)
				sink(intoCookie451) // $taintSink
			}
			// func (*Cookie).Path() []byte
			{
				fromCookie326 := source().(fasthttp.Cookie)
				intoByte825 := fromCookie326.Path()
				sink(intoByte825) // $taintSink
			}
			// func (*Cookie).SetDomain(domain string)
			{
				fromString527 := source().(string)
				var intoCookie959 fasthttp.Cookie
				intoCookie959.SetDomain(fromString527)
				sink(intoCookie959) // $taintSink
			}
			// func (*Cookie).SetDomainBytes(domain []byte)
			{
				fromByte852 := source().([]byte)
				var intoCookie555 fasthttp.Cookie
				intoCookie555.SetDomainBytes(fromByte852)
				sink(intoCookie555) // $taintSink
			}
			// func (*Cookie).SetKey(key string)
			{
				fromString158 := source().(string)
				var intoCookie688 fasthttp.Cookie
				intoCookie688.SetKey(fromString158)
				sink(intoCookie688) // $taintSink
			}
			// func (*Cookie).SetKeyBytes(key []byte)
			{
				fromByte821 := source().([]byte)
				var intoCookie791 fasthttp.Cookie
				intoCookie791.SetKeyBytes(fromByte821)
				sink(intoCookie791) // $taintSink
			}
			// func (*Cookie).SetPath(path string)
			{
				fromString998 := source().(string)
				var intoCookie201 fasthttp.Cookie
				intoCookie201.SetPath(fromString998)
				sink(intoCookie201) // $taintSink
			}
			// func (*Cookie).SetPathBytes(path []byte)
			{
				fromByte958 := source().([]byte)
				var intoCookie891 fasthttp.Cookie
				intoCookie891.SetPathBytes(fromByte958)
				sink(intoCookie891) // $taintSink
			}
			// func (*Cookie).SetValue(value string)
			{
				fromString295 := source().(string)
				var intoCookie138 fasthttp.Cookie
				intoCookie138.SetValue(fromString295)
				sink(intoCookie138) // $taintSink
			}
			// func (*Cookie).SetValueBytes(value []byte)
			{
				fromByte542 := source().([]byte)
				var intoCookie255 fasthttp.Cookie
				intoCookie255.SetValueBytes(fromByte542)
				sink(intoCookie255) // $taintSink
			}
			// func (*Cookie).String() string
			{
				fromCookie925 := source().(fasthttp.Cookie)
				intoString723 := fromCookie925.String()
				sink(intoString723) // $taintSink
			}
			// func (*Cookie).Value() []byte
			{
				fromCookie538 := source().(fasthttp.Cookie)
				intoByte398 := fromCookie538.Value()
				sink(intoByte398) // $taintSink
			}
			// func (*Cookie).WriteTo(w io.Writer) (int64, error)
			{
				fromCookie196 := source().(fasthttp.Cookie)
				var intoWriter219 io.Writer
				fromCookie196.WriteTo(intoWriter219)
				sink(intoWriter219) // $taintSink
			}
		}
		// Taint-tracking through method calls on github.com/valyala/fasthttp.Request.
		{
			// func (*Request).AppendBody(p []byte)
			{
				fromByte786 := source().([]byte)
				var intoRequest676 fasthttp.Request
				intoRequest676.AppendBody(fromByte786)
				sink(intoRequest676) // $taintSink
			}
			// func (*Request).AppendBodyString(s string)
			{
				fromString524 := source().(string)
				var intoRequest154 fasthttp.Request
				intoRequest154.AppendBodyString(fromString524)
				sink(intoRequest154) // $taintSink
			}
			// func (*Request).Body() []byte
			{
				fromRequest680 := source().(fasthttp.Request)
				intoByte360 := fromRequest680.Body()
				sink(intoByte360) // $taintSink
			}
			// func (*Request).BodyGunzip() ([]byte, error)
			{
				fromRequest589 := source().(fasthttp.Request)
				intoByte571, _ := fromRequest589.BodyGunzip()
				sink(intoByte571) // $taintSink
			}
			// func (*Request).BodyInflate() ([]byte, error)
			{
				fromRequest625 := source().(fasthttp.Request)
				intoByte119, _ := fromRequest625.BodyInflate()
				sink(intoByte119) // $taintSink
			}
			// func (*Request).BodyUnbrotli() ([]byte, error)
			{
				fromRequest823 := source().(fasthttp.Request)
				intoByte395, _ := fromRequest823.BodyUnbrotli()
				sink(intoByte395) // $taintSink
			}
			// func (*Request).BodyWriteTo(w io.Writer) error
			{
				fromRequest241 := source().(fasthttp.Request)
				var intoWriter756 io.Writer
				fromRequest241.BodyWriteTo(intoWriter756)
				sink(intoWriter756) // $taintSink
			}
			// func (*Request).BodyWriter() io.Writer
			{
				fromWriter620 := source().(io.Writer)
				var intoRequest331 fasthttp.Request
				intermediateCQL := intoRequest331.BodyWriter()
				link(fromWriter620, intermediateCQL)
				sink(intoRequest331) // $taintSink
			}
			// func (*Request).ContinueReadBody(r *bufio.Reader, maxBodySize int, preParseMultipartForm ...bool) error
			{
				fromReader763 := source().(*bufio.Reader)
				var intoRequest134 fasthttp.Request
				intoRequest134.ContinueReadBody(fromReader763, 0, false)
				sink(intoRequest134) // $taintSink
			}
			// func (*Request).ContinueReadBodyStream(r *bufio.Reader, maxBodySize int, preParseMultipartForm ...bool) error
			{
				fromReader657 := source().(*bufio.Reader)
				var intoRequest495 fasthttp.Request
				intoRequest495.ContinueReadBodyStream(fromReader657, 0, false)
				sink(intoRequest495) // $taintSink
			}
			// func (*Request).CopyTo(dst *Request)
			{
				fromRequest723 := source().(fasthttp.Request)
				var intoRequest246 *fasthttp.Request
				fromRequest723.CopyTo(intoRequest246)
				sink(intoRequest246) // $taintSink
			}
			// func (*Request).Host() []byte
			{
				fromRequest372 := source().(fasthttp.Request)
				intoByte812 := fromRequest372.Host()
				sink(intoByte812) // $taintSink
			}
			// func (*Request).MultipartForm() (*mime/multipart.Form, error)
			{
				fromRequest459 := source().(fasthttp.Request)
				intoForm455, _ := fromRequest459.MultipartForm()
				sink(intoForm455) // $taintSink
			}
			// func (*Request).PostArgs() *Args
			{
				fromRequest614 := source().(fasthttp.Request)
				intoArgs676 := fromRequest614.PostArgs()
				sink(intoArgs676) // $taintSink
			}
			// func (*Request).Read(r *bufio.Reader) error
			{
				fromReader628 := source().(*bufio.Reader)
				var intoRequest480 fasthttp.Request
				intoRequest480.Read(fromReader628)
				sink(intoRequest480) // $taintSink
			}
			// func (*Request).ReadLimitBody(r *bufio.Reader, maxBodySize int) error
			{
				fromReader715 := source().(*bufio.Reader)
				var intoRequest940 fasthttp.Request
				intoRequest940.ReadLimitBody(fromReader715, 0)
				sink(intoRequest940) // $taintSink
			}
			// func (*Request).RequestURI() []byte
			{
				fromRequest692 := source().(fasthttp.Request)
				intoByte382 := fromRequest692.RequestURI()
				sink(intoByte382) // $taintSink
			}
			// func (*Request).SetBody(body []byte)
			{
				fromByte134 := source().([]byte)
				var intoRequest701 fasthttp.Request
				intoRequest701.SetBody(fromByte134)
				sink(intoRequest701) // $taintSink
			}
			// func (*Request).SetBodyRaw(body []byte)
			{
				fromByte903 := source().([]byte)
				var intoRequest533 fasthttp.Request
				intoRequest533.SetBodyRaw(fromByte903)
				sink(intoRequest533) // $taintSink
			}
			// func (*Request).SetBodyStream(bodyStream io.Reader, bodySize int)
			{
				fromReader667 := source().(io.Reader)
				var intoRequest927 fasthttp.Request
				intoRequest927.SetBodyStream(fromReader667, 0)
				sink(intoRequest927) // $taintSink
			}
			// func (*Request).SetBodyString(body string)
			{
				fromString515 := source().(string)
				var intoRequest892 fasthttp.Request
				intoRequest892.SetBodyString(fromString515)
				sink(intoRequest892) // $taintSink
			}
			// func (*Request).SetHost(host string)
			{
				fromString650 := source().(string)
				var intoRequest882 fasthttp.Request
				intoRequest882.SetHost(fromString650)
				sink(intoRequest882) // $taintSink
			}
			// func (*Request).SetHostBytes(host []byte)
			{
				fromByte740 := source().([]byte)
				var intoRequest189 fasthttp.Request
				intoRequest189.SetHostBytes(fromByte740)
				sink(intoRequest189) // $taintSink
			}
			// func (*Request).SetRequestURI(requestURI string)
			{
				fromString797 := source().(string)
				var intoRequest628 fasthttp.Request
				intoRequest628.SetRequestURI(fromString797)
				sink(intoRequest628) // $taintSink
			}
			// func (*Request).SetRequestURIBytes(requestURI []byte)
			{
				fromByte797 := source().([]byte)
				var intoRequest895 fasthttp.Request
				intoRequest895.SetRequestURIBytes(fromByte797)
				sink(intoRequest895) // $taintSink
			}
			// func (*Request).String() string
			{
				fromRequest809 := source().(fasthttp.Request)
				intoString511 := fromRequest809.String()
				sink(intoString511) // $taintSink
			}
			// func (*Request).SwapBody(body []byte) []byte
			{
				{
					fromByte511 := source().([]byte)
					var intoRequest426 fasthttp.Request
					intoRequest426.SwapBody(fromByte511)
					sink(intoRequest426) // $taintSink
				}
				{
					fromRequest333 := source().(fasthttp.Request)
					intoByte132 := fromRequest333.SwapBody(nil)
					sink(intoByte132) // $taintSink
				}
			}
			// func (*Request).URI() *URI
			{
				fromRequest123 := source().(fasthttp.Request)
				intoURI300 := fromRequest123.URI()
				sink(intoURI300) // $taintSink
			}
			// func (*Request).Write(w *bufio.Writer) error
			{
				fromRequest597 := source().(fasthttp.Request)
				var intoWriter959 *bufio.Writer
				fromRequest597.Write(intoWriter959)
				sink(intoWriter959) // $taintSink
			}
			// func (*Request).WriteTo(w io.Writer) (int64, error)
			{
				fromRequest375 := source().(fasthttp.Request)
				var intoWriter763 io.Writer
				fromRequest375.WriteTo(intoWriter763)
				sink(intoWriter763) // $taintSink
			}
		}
		// Taint-tracking through method calls on github.com/valyala/fasthttp.RequestCtx.
		{
			// func (*RequestCtx).Conn() net.Conn
			{
				{
					fromRequestCtx957 := source().(fasthttp.RequestCtx)
					intoConn802 := fromRequestCtx957.Conn()
					sink(intoConn802) // $taintSink
				}
				{
					fromConn836 := source().(net.Conn)
					var intoRequestCtx310 fasthttp.RequestCtx
					intermediateCQL := intoRequestCtx310.Conn()
					link(fromConn836, intermediateCQL)
					sink(intoRequestCtx310) // $taintSink
				}
			}
			// func (*RequestCtx).FormFile(key string) (*mime/multipart.FileHeader, error)
			{
				fromRequestCtx776 := source().(fasthttp.RequestCtx)
				intoFileHeader481, _ := fromRequestCtx776.FormFile("")
				sink(intoFileHeader481) // $taintSink
			}
			// func (*RequestCtx).FormValue(key string) []byte
			{
				fromRequestCtx862 := source().(fasthttp.RequestCtx)
				intoByte983 := fromRequestCtx862.FormValue("")
				sink(intoByte983) // $taintSink
			}
			// func (*RequestCtx).Host() []byte
			{
				fromRequestCtx448 := source().(fasthttp.RequestCtx)
				intoByte654 := fromRequestCtx448.Host()
				sink(intoByte654) // $taintSink
			}
			// func (*RequestCtx).Method() []byte
			{
				fromRequestCtx128 := source().(fasthttp.RequestCtx)
				intoByte990 := fromRequestCtx128.Method()
				sink(intoByte990) // $taintSink
			}
			// func (*RequestCtx).MultipartForm() (*mime/multipart.Form, error)
			{
				fromRequestCtx918 := source().(fasthttp.RequestCtx)
				intoForm214, _ := fromRequestCtx918.MultipartForm()
				sink(intoForm214) // $taintSink
			}
			// func (*RequestCtx).Path() []byte
			{
				fromRequestCtx140 := source().(fasthttp.RequestCtx)
				intoByte309 := fromRequestCtx140.Path()
				sink(intoByte309) // $taintSink
			}
			// func (*RequestCtx).PostArgs() *Args
			{
				fromRequestCtx906 := source().(fasthttp.RequestCtx)
				intoArgs554 := fromRequestCtx906.PostArgs()
				sink(intoArgs554) // $taintSink
			}
			// func (*RequestCtx).PostBody() []byte
			{
				fromRequestCtx455 := source().(fasthttp.RequestCtx)
				intoByte975 := fromRequestCtx455.PostBody()
				sink(intoByte975) // $taintSink
			}
			// func (*RequestCtx).QueryArgs() *Args
			{
				fromRequestCtx607 := source().(fasthttp.RequestCtx)
				intoArgs716 := fromRequestCtx607.QueryArgs()
				sink(intoArgs716) // $taintSink
			}
			// func (*RequestCtx).Referer() []byte
			{
				fromRequestCtx973 := source().(fasthttp.RequestCtx)
				intoByte139 := fromRequestCtx973.Referer()
				sink(intoByte139) // $taintSink
			}
			// func (*RequestCtx).RequestBodyStream() io.Reader
			{
				fromRequestCtx502 := source().(fasthttp.RequestCtx)
				intoReader161 := fromRequestCtx502.RequestBodyStream()
				sink(intoReader161) // $taintSink
			}
			// func (*RequestCtx).RequestURI() []byte
			{
				fromRequestCtx169 := source().(fasthttp.RequestCtx)
				intoByte208 := fromRequestCtx169.RequestURI()
				sink(intoByte208) // $taintSink
			}
			// func (*RequestCtx).SetBody(body []byte)
			{
				fromByte821 := source().([]byte)
				var intoRequestCtx690 fasthttp.RequestCtx
				intoRequestCtx690.SetBody(fromByte821)
				sink(intoRequestCtx690) // $taintSink
			}
			// func (*RequestCtx).SetBodyStream(bodyStream io.Reader, bodySize int)
			{
				fromReader177 := source().(io.Reader)
				var intoRequestCtx393 fasthttp.RequestCtx
				intoRequestCtx393.SetBodyStream(fromReader177, 0)
				sink(intoRequestCtx393) // $taintSink
			}
			// func (*RequestCtx).SetBodyString(body string)
			{
				fromString258 := source().(string)
				var intoRequestCtx777 fasthttp.RequestCtx
				intoRequestCtx777.SetBodyString(fromString258)
				sink(intoRequestCtx777) // $taintSink
			}
			// func (*RequestCtx).String() string
			{
				fromRequestCtx282 := source().(fasthttp.RequestCtx)
				intoString459 := fromRequestCtx282.String()
				sink(intoString459) // $taintSink
			}
			// func (*RequestCtx).URI() *URI
			{
				fromRequestCtx410 := source().(fasthttp.RequestCtx)
				intoURI256 := fromRequestCtx410.URI()
				sink(intoURI256) // $taintSink
			}
			// func (*RequestCtx).UserAgent() []byte
			{
				fromRequestCtx949 := source().(fasthttp.RequestCtx)
				intoByte510 := fromRequestCtx949.UserAgent()
				sink(intoByte510) // $taintSink
			}
		}
		// Taint-tracking through method calls on github.com/valyala/fasthttp.RequestHeader.
		{
			// func (*RequestHeader).Add(key string, value string)
			{
				{
					fromString394 := source().(string)
					var intoRequestHeader305 fasthttp.RequestHeader
					intoRequestHeader305.Add(fromString394, "")
					sink(intoRequestHeader305) // $taintSink
				}
				{
					fromString142 := source().(string)
					var intoRequestHeader655 fasthttp.RequestHeader
					intoRequestHeader655.Add("", fromString142)
					sink(intoRequestHeader655) // $taintSink
				}
			}
			// func (*RequestHeader).AddBytesK(key []byte, value string)
			{
				{
					fromByte651 := source().([]byte)
					var intoRequestHeader853 fasthttp.RequestHeader
					intoRequestHeader853.AddBytesK(fromByte651, "")
					sink(intoRequestHeader853) // $taintSink
				}
				{
					fromString796 := source().(string)
					var intoRequestHeader963 fasthttp.RequestHeader
					intoRequestHeader963.AddBytesK(nil, fromString796)
					sink(intoRequestHeader963) // $taintSink
				}
			}
			// func (*RequestHeader).AddBytesKV(key []byte, value []byte)
			{
				{
					fromByte579 := source().([]byte)
					var intoRequestHeader850 fasthttp.RequestHeader
					intoRequestHeader850.AddBytesKV(fromByte579, nil)
					sink(intoRequestHeader850) // $taintSink
				}
				{
					fromByte144 := source().([]byte)
					var intoRequestHeader985 fasthttp.RequestHeader
					intoRequestHeader985.AddBytesKV(nil, fromByte144)
					sink(intoRequestHeader985) // $taintSink
				}
			}
			// func (*RequestHeader).AddBytesV(key string, value []byte)
			{
				{
					fromString724 := source().(string)
					var intoRequestHeader721 fasthttp.RequestHeader
					intoRequestHeader721.AddBytesV(fromString724, nil)
					sink(intoRequestHeader721) // $taintSink
				}
				{
					fromByte358 := source().([]byte)
					var intoRequestHeader237 fasthttp.RequestHeader
					intoRequestHeader237.AddBytesV("", fromByte358)
					sink(intoRequestHeader237) // $taintSink
				}
			}
			// func (*RequestHeader).AppendBytes(dst []byte) []byte
			{
				{
					fromRequestHeader496 := source().(fasthttp.RequestHeader)
					var intoByte879 []byte
					fromRequestHeader496.AppendBytes(intoByte879)
					sink(intoByte879) // $taintSink
				}
				{
					fromRequestHeader190 := source().(fasthttp.RequestHeader)
					intoByte516 := fromRequestHeader190.AppendBytes(nil)
					sink(intoByte516) // $taintSink
				}
				{
					fromByte385 := source().([]byte)
					var mediumObjCQL fasthttp.RequestHeader
					intoByte641 := mediumObjCQL.AppendBytes(fromByte385)
					sink(intoByte641) // $taintSink
				}
			}
			// func (*RequestHeader).ContentType() []byte
			{
				fromRequestHeader744 := source().(fasthttp.RequestHeader)
				intoByte806 := fromRequestHeader744.ContentType()
				sink(intoByte806) // $taintSink
			}
			// func (*RequestHeader).Cookie(key string) []byte
			{
				fromRequestHeader676 := source().(fasthttp.RequestHeader)
				intoByte263 := fromRequestHeader676.Cookie("")
				sink(intoByte263) // $taintSink
			}
			// func (*RequestHeader).CookieBytes(key []byte) []byte
			{
				fromRequestHeader591 := source().(fasthttp.RequestHeader)
				intoByte504 := fromRequestHeader591.CookieBytes(nil)
				sink(intoByte504) // $taintSink
			}
			// func (*RequestHeader).CopyTo(dst *RequestHeader)
			{
				fromRequestHeader996 := source().(fasthttp.RequestHeader)
				var intoRequestHeader803 *fasthttp.RequestHeader
				fromRequestHeader996.CopyTo(intoRequestHeader803)
				sink(intoRequestHeader803) // $taintSink
			}
			// func (*RequestHeader).Header() []byte
			{
				fromRequestHeader180 := source().(fasthttp.RequestHeader)
				intoByte345 := fromRequestHeader180.Header()
				sink(intoByte345) // $taintSink
			}
			// func (*RequestHeader).Host() []byte
			{
				fromRequestHeader603 := source().(fasthttp.RequestHeader)
				intoByte438 := fromRequestHeader603.Host()
				sink(intoByte438) // $taintSink
			}
			// func (*RequestHeader).Method() []byte
			{
				fromRequestHeader859 := source().(fasthttp.RequestHeader)
				intoByte721 := fromRequestHeader859.Method()
				sink(intoByte721) // $taintSink
			}
			// func (*RequestHeader).MultipartFormBoundary() []byte
			{
				fromRequestHeader980 := source().(fasthttp.RequestHeader)
				intoByte458 := fromRequestHeader980.MultipartFormBoundary()
				sink(intoByte458) // $taintSink
			}
			// func (*RequestHeader).Peek(key string) []byte
			{
				fromRequestHeader933 := source().(fasthttp.RequestHeader)
				intoByte638 := fromRequestHeader933.Peek("")
				sink(intoByte638) // $taintSink
			}
			// func (*RequestHeader).PeekBytes(key []byte) []byte
			{
				fromRequestHeader264 := source().(fasthttp.RequestHeader)
				intoByte491 := fromRequestHeader264.PeekBytes(nil)
				sink(intoByte491) // $taintSink
			}
			// func (*RequestHeader).Protocol() []byte
			{
				fromRequestHeader279 := source().(fasthttp.RequestHeader)
				intoByte654 := fromRequestHeader279.Protocol()
				sink(intoByte654) // $taintSink
			}
			// func (*RequestHeader).RawHeaders() []byte
			{
				fromRequestHeader656 := source().(fasthttp.RequestHeader)
				intoByte501 := fromRequestHeader656.RawHeaders()
				sink(intoByte501) // $taintSink
			}
			// func (*RequestHeader).Read(r *bufio.Reader) error
			{
				fromReader139 := source().(*bufio.Reader)
				var intoRequestHeader561 fasthttp.RequestHeader
				intoRequestHeader561.Read(fromReader139)
				sink(intoRequestHeader561) // $taintSink
			}
			// func (*RequestHeader).Referer() []byte
			{
				fromRequestHeader702 := source().(fasthttp.RequestHeader)
				intoByte585 := fromRequestHeader702.Referer()
				sink(intoByte585) // $taintSink
			}
			// func (*RequestHeader).RequestURI() []byte
			{
				fromRequestHeader336 := source().(fasthttp.RequestHeader)
				intoByte419 := fromRequestHeader336.RequestURI()
				sink(intoByte419) // $taintSink
			}
			// func (*RequestHeader).Set(key string, value string)
			{
				{
					fromString964 := source().(string)
					var intoRequestHeader429 fasthttp.RequestHeader
					intoRequestHeader429.Set(fromString964, "")
					sink(intoRequestHeader429) // $taintSink
				}
				{
					fromString470 := source().(string)
					var intoRequestHeader943 fasthttp.RequestHeader
					intoRequestHeader943.Set("", fromString470)
					sink(intoRequestHeader943) // $taintSink
				}
			}
			// func (*RequestHeader).SetBytesK(key []byte, value string)
			{
				{
					fromByte287 := source().([]byte)
					var intoRequestHeader720 fasthttp.RequestHeader
					intoRequestHeader720.SetBytesK(fromByte287, "")
					sink(intoRequestHeader720) // $taintSink
				}
				{
					fromString242 := source().(string)
					var intoRequestHeader453 fasthttp.RequestHeader
					intoRequestHeader453.SetBytesK(nil, fromString242)
					sink(intoRequestHeader453) // $taintSink
				}
			}
			// func (*RequestHeader).SetBytesKV(key []byte, value []byte)
			{
				{
					fromByte713 := source().([]byte)
					var intoRequestHeader795 fasthttp.RequestHeader
					intoRequestHeader795.SetBytesKV(fromByte713, nil)
					sink(intoRequestHeader795) // $taintSink
				}
				{
					fromByte242 := source().([]byte)
					var intoRequestHeader795 fasthttp.RequestHeader
					intoRequestHeader795.SetBytesKV(nil, fromByte242)
					sink(intoRequestHeader795) // $taintSink
				}
			}
			// func (*RequestHeader).SetBytesV(key string, value []byte)
			{
				{
					fromString828 := source().(string)
					var intoRequestHeader601 fasthttp.RequestHeader
					intoRequestHeader601.SetBytesV(fromString828, nil)
					sink(intoRequestHeader601) // $taintSink
				}
				{
					fromByte757 := source().([]byte)
					var intoRequestHeader322 fasthttp.RequestHeader
					intoRequestHeader322.SetBytesV("", fromByte757)
					sink(intoRequestHeader322) // $taintSink
				}
			}
			// func (*RequestHeader).SetCanonical(key []byte, value []byte)
			{
				{
					fromByte553 := source().([]byte)
					var intoRequestHeader181 fasthttp.RequestHeader
					intoRequestHeader181.SetCanonical(fromByte553, nil)
					sink(intoRequestHeader181) // $taintSink
				}
				{
					fromByte986 := source().([]byte)
					var intoRequestHeader749 fasthttp.RequestHeader
					intoRequestHeader749.SetCanonical(nil, fromByte986)
					sink(intoRequestHeader749) // $taintSink
				}
			}
			// func (*RequestHeader).SetContentType(contentType string)
			{
				fromString235 := source().(string)
				var intoRequestHeader580 fasthttp.RequestHeader
				intoRequestHeader580.SetContentType(fromString235)
				sink(intoRequestHeader580) // $taintSink
			}
			// func (*RequestHeader).SetContentTypeBytes(contentType []byte)
			{
				fromByte192 := source().([]byte)
				var intoRequestHeader741 fasthttp.RequestHeader
				intoRequestHeader741.SetContentTypeBytes(fromByte192)
				sink(intoRequestHeader741) // $taintSink
			}
			// func (*RequestHeader).SetCookie(key string, value string)
			{
				{
					fromString307 := source().(string)
					var intoRequestHeader180 fasthttp.RequestHeader
					intoRequestHeader180.SetCookie(fromString307, "")
					sink(intoRequestHeader180) // $taintSink
				}
				{
					fromString801 := source().(string)
					var intoRequestHeader156 fasthttp.RequestHeader
					intoRequestHeader156.SetCookie("", fromString801)
					sink(intoRequestHeader156) // $taintSink
				}
			}
			// func (*RequestHeader).SetCookieBytesK(key []byte, value string)
			{
				{
					fromByte837 := source().([]byte)
					var intoRequestHeader741 fasthttp.RequestHeader
					intoRequestHeader741.SetCookieBytesK(fromByte837, "")
					sink(intoRequestHeader741) // $taintSink
				}
				{
					fromString462 := source().(string)
					var intoRequestHeader119 fasthttp.RequestHeader
					intoRequestHeader119.SetCookieBytesK(nil, fromString462)
					sink(intoRequestHeader119) // $taintSink
				}
			}
			// func (*RequestHeader).SetCookieBytesKV(key []byte, value []byte)
			{
				{
					fromByte819 := source().([]byte)
					var intoRequestHeader883 fasthttp.RequestHeader
					intoRequestHeader883.SetCookieBytesKV(fromByte819, nil)
					sink(intoRequestHeader883) // $taintSink
				}
				{
					fromByte926 := source().([]byte)
					var intoRequestHeader622 fasthttp.RequestHeader
					intoRequestHeader622.SetCookieBytesKV(nil, fromByte926)
					sink(intoRequestHeader622) // $taintSink
				}
			}
			// func (*RequestHeader).SetHost(host string)
			{
				fromString115 := source().(string)
				var intoRequestHeader564 fasthttp.RequestHeader
				intoRequestHeader564.SetHost(fromString115)
				sink(intoRequestHeader564) // $taintSink
			}
			// func (*RequestHeader).SetHostBytes(host []byte)
			{
				fromByte476 := source().([]byte)
				var intoRequestHeader941 fasthttp.RequestHeader
				intoRequestHeader941.SetHostBytes(fromByte476)
				sink(intoRequestHeader941) // $taintSink
			}
			// func (*RequestHeader).SetMethod(method string)
			{
				fromString290 := source().(string)
				var intoRequestHeader363 fasthttp.RequestHeader
				intoRequestHeader363.SetMethod(fromString290)
				sink(intoRequestHeader363) // $taintSink
			}
			// func (*RequestHeader).SetMethodBytes(method []byte)
			{
				fromByte848 := source().([]byte)
				var intoRequestHeader677 fasthttp.RequestHeader
				intoRequestHeader677.SetMethodBytes(fromByte848)
				sink(intoRequestHeader677) // $taintSink
			}
			// func (*RequestHeader).SetMultipartFormBoundary(boundary string)
			{
				fromString168 := source().(string)
				var intoRequestHeader858 fasthttp.RequestHeader
				intoRequestHeader858.SetMultipartFormBoundary(fromString168)
				sink(intoRequestHeader858) // $taintSink
			}
			// func (*RequestHeader).SetMultipartFormBoundaryBytes(boundary []byte)
			{
				fromByte212 := source().([]byte)
				var intoRequestHeader538 fasthttp.RequestHeader
				intoRequestHeader538.SetMultipartFormBoundaryBytes(fromByte212)
				sink(intoRequestHeader538) // $taintSink
			}
			// func (*RequestHeader).SetProtocol(method string)
			{
				fromString946 := source().(string)
				var intoRequestHeader160 fasthttp.RequestHeader
				intoRequestHeader160.SetProtocol(fromString946)
				sink(intoRequestHeader160) // $taintSink
			}
			// func (*RequestHeader).SetProtocolBytes(method []byte)
			{
				fromByte516 := source().([]byte)
				var intoRequestHeader898 fasthttp.RequestHeader
				intoRequestHeader898.SetProtocolBytes(fromByte516)
				sink(intoRequestHeader898) // $taintSink
			}
			// func (*RequestHeader).SetReferer(referer string)
			{
				fromString254 := source().(string)
				var intoRequestHeader403 fasthttp.RequestHeader
				intoRequestHeader403.SetReferer(fromString254)
				sink(intoRequestHeader403) // $taintSink
			}
			// func (*RequestHeader).SetRefererBytes(referer []byte)
			{
				fromByte115 := source().([]byte)
				var intoRequestHeader114 fasthttp.RequestHeader
				intoRequestHeader114.SetRefererBytes(fromByte115)
				sink(intoRequestHeader114) // $taintSink
			}
			// func (*RequestHeader).SetRequestURI(requestURI string)
			{
				fromString288 := source().(string)
				var intoRequestHeader669 fasthttp.RequestHeader
				intoRequestHeader669.SetRequestURI(fromString288)
				sink(intoRequestHeader669) // $taintSink
			}
			// func (*RequestHeader).SetRequestURIBytes(requestURI []byte)
			{
				fromByte452 := source().([]byte)
				var intoRequestHeader552 fasthttp.RequestHeader
				intoRequestHeader552.SetRequestURIBytes(fromByte452)
				sink(intoRequestHeader552) // $taintSink
			}
			// func (*RequestHeader).SetUserAgent(userAgent string)
			{
				fromString790 := source().(string)
				var intoRequestHeader614 fasthttp.RequestHeader
				intoRequestHeader614.SetUserAgent(fromString790)
				sink(intoRequestHeader614) // $taintSink
			}
			// func (*RequestHeader).SetUserAgentBytes(userAgent []byte)
			{
				fromByte707 := source().([]byte)
				var intoRequestHeader140 fasthttp.RequestHeader
				intoRequestHeader140.SetUserAgentBytes(fromByte707)
				sink(intoRequestHeader140) // $taintSink
			}
			// func (*RequestHeader).String() string
			{
				fromRequestHeader189 := source().(fasthttp.RequestHeader)
				intoString297 := fromRequestHeader189.String()
				sink(intoString297) // $taintSink
			}
			// func (*RequestHeader).UserAgent() []byte
			{
				fromRequestHeader903 := source().(fasthttp.RequestHeader)
				intoByte354 := fromRequestHeader903.UserAgent()
				sink(intoByte354) // $taintSink
			}
			// func (*RequestHeader).Write(w *bufio.Writer) error
			{
				fromRequestHeader765 := source().(fasthttp.RequestHeader)
				var intoWriter537 *bufio.Writer
				fromRequestHeader765.Write(intoWriter537)
				sink(intoWriter537) // $taintSink
			}
			// func (*RequestHeader).WriteTo(w io.Writer) (int64, error)
			{
				fromRequestHeader344 := source().(fasthttp.RequestHeader)
				var intoWriter269 io.Writer
				fromRequestHeader344.WriteTo(intoWriter269)
				sink(intoWriter269) // $taintSink
			}
		}
		// Taint-tracking through method calls on github.com/valyala/fasthttp.Response.
		{
			// func (*Response).AppendBody(p []byte)
			{
				fromByte553 := source().([]byte)
				var intoResponse629 fasthttp.Response
				intoResponse629.AppendBody(fromByte553)
				sink(intoResponse629) // $taintSink
			}
			// func (*Response).AppendBodyString(s string)
			{
				fromString698 := source().(string)
				var intoResponse857 fasthttp.Response
				intoResponse857.AppendBodyString(fromString698)
				sink(intoResponse857) // $taintSink
			}
			// func (*Response).Body() []byte
			{
				fromResponse714 := source().(fasthttp.Response)
				intoByte817 := fromResponse714.Body()
				sink(intoByte817) // $taintSink
			}
			// func (*Response).BodyGunzip() ([]byte, error)
			{
				fromResponse836 := source().(fasthttp.Response)
				intoByte676, _ := fromResponse836.BodyGunzip()
				sink(intoByte676) // $taintSink
			}
			// func (*Response).BodyInflate() ([]byte, error)
			{
				fromResponse780 := source().(fasthttp.Response)
				intoByte886, _ := fromResponse780.BodyInflate()
				sink(intoByte886) // $taintSink
			}
			// func (*Response).BodyUnbrotli() ([]byte, error)
			{
				fromResponse503 := source().(fasthttp.Response)
				intoByte541, _ := fromResponse503.BodyUnbrotli()
				sink(intoByte541) // $taintSink
			}
			// func (*Response).BodyWriteTo(w io.Writer) error
			{
				fromResponse357 := source().(fasthttp.Response)
				var intoWriter838 io.Writer
				fromResponse357.BodyWriteTo(intoWriter838)
				sink(intoWriter838) // $taintSink
			}
			// func (*Response).BodyWriter() io.Writer
			{
				fromWriter585 := source().(io.Writer)
				var intoResponse344 fasthttp.Response
				intermediateCQL := intoResponse344.BodyWriter()
				link(fromWriter585, intermediateCQL)
				sink(intoResponse344) // $taintSink
			}
			// func (*Response).CopyTo(dst *Response)
			{
				fromResponse914 := source().(fasthttp.Response)
				var intoResponse557 *fasthttp.Response
				fromResponse914.CopyTo(intoResponse557)
				sink(intoResponse557) // $taintSink
			}
			// func (*Response).Read(r *bufio.Reader) error
			{
				fromReader177 := source().(*bufio.Reader)
				var intoResponse912 fasthttp.Response
				intoResponse912.Read(fromReader177)
				sink(intoResponse912) // $taintSink
			}
			// func (*Response).ReadLimitBody(r *bufio.Reader, maxBodySize int) error
			{
				fromReader634 := source().(*bufio.Reader)
				var intoResponse484 fasthttp.Response
				intoResponse484.ReadLimitBody(fromReader634, 0)
				sink(intoResponse484) // $taintSink
			}
			// func (*Response).SetBody(body []byte)
			{
				fromByte720 := source().([]byte)
				var intoResponse271 fasthttp.Response
				intoResponse271.SetBody(fromByte720)
				sink(intoResponse271) // $taintSink
			}
			// func (*Response).SetBodyRaw(body []byte)
			{
				fromByte263 := source().([]byte)
				var intoResponse789 fasthttp.Response
				intoResponse789.SetBodyRaw(fromByte263)
				sink(intoResponse789) // $taintSink
			}
			// func (*Response).SetBodyStream(bodyStream io.Reader, bodySize int)
			{
				fromReader360 := source().(io.Reader)
				var intoResponse715 fasthttp.Response
				intoResponse715.SetBodyStream(fromReader360, 0)
				sink(intoResponse715) // $taintSink
			}
			// func (*Response).SetBodyStreamWriter(sw StreamWriter)
			{
				fromStreamWriter708 := source().(fasthttp.StreamWriter)
				var intoResponse403 fasthttp.Response
				intoResponse403.SetBodyStreamWriter(fromStreamWriter708)
				sink(intoResponse403) // $taintSink
			}
			// func (*Response).SetBodyString(body string)
			{
				fromString817 := source().(string)
				var intoResponse426 fasthttp.Response
				intoResponse426.SetBodyString(fromString817)
				sink(intoResponse426) // $taintSink
			}
			// func (*Response).String() string
			{
				fromResponse685 := source().(fasthttp.Response)
				intoString663 := fromResponse685.String()
				sink(intoString663) // $taintSink
			}
			// func (*Response).SwapBody(body []byte) []byte
			{
				{
					fromByte112 := source().([]byte)
					var intoResponse445 fasthttp.Response
					intoResponse445.SwapBody(fromByte112)
					sink(intoResponse445) // $taintSink
				}
				{
					fromResponse374 := source().(fasthttp.Response)
					intoByte476 := fromResponse374.SwapBody(nil)
					sink(intoByte476) // $taintSink
				}
			}
			// func (*Response).Write(w *bufio.Writer) error
			{
				fromResponse909 := source().(fasthttp.Response)
				var intoWriter456 *bufio.Writer
				fromResponse909.Write(intoWriter456)
				sink(intoWriter456) // $taintSink
			}
			// func (*Response).WriteDeflate(w *bufio.Writer) error
			{
				fromResponse595 := source().(fasthttp.Response)
				var intoWriter526 *bufio.Writer
				fromResponse595.WriteDeflate(intoWriter526)
				sink(intoWriter526) // $taintSink
			}
			// func (*Response).WriteDeflateLevel(w *bufio.Writer, level int) error
			{
				fromResponse635 := source().(fasthttp.Response)
				var intoWriter878 *bufio.Writer
				fromResponse635.WriteDeflateLevel(intoWriter878, 0)
				sink(intoWriter878) // $taintSink
			}
			// func (*Response).WriteGzip(w *bufio.Writer) error
			{
				fromResponse951 := source().(fasthttp.Response)
				var intoWriter926 *bufio.Writer
				fromResponse951.WriteGzip(intoWriter926)
				sink(intoWriter926) // $taintSink
			}
			// func (*Response).WriteGzipLevel(w *bufio.Writer, level int) error
			{
				fromResponse388 := source().(fasthttp.Response)
				var intoWriter673 *bufio.Writer
				fromResponse388.WriteGzipLevel(intoWriter673, 0)
				sink(intoWriter673) // $taintSink
			}
			// func (*Response).WriteTo(w io.Writer) (int64, error)
			{
				fromResponse466 := source().(fasthttp.Response)
				var intoWriter399 io.Writer
				fromResponse466.WriteTo(intoWriter399)
				sink(intoWriter399) // $taintSink
			}
		}
		// Taint-tracking through method calls on github.com/valyala/fasthttp.ResponseHeader.
		{
			// func (*ResponseHeader).Add(key string, value string)
			{
				{
					fromString337 := source().(string)
					var intoResponseHeader409 fasthttp.ResponseHeader
					intoResponseHeader409.Add(fromString337, "")
					sink(intoResponseHeader409) // $taintSink
				}
				{
					fromString391 := source().(string)
					var intoResponseHeader323 fasthttp.ResponseHeader
					intoResponseHeader323.Add("", fromString391)
					sink(intoResponseHeader323) // $taintSink
				}
			}
			// func (*ResponseHeader).AddBytesK(key []byte, value string)
			{
				{
					fromByte474 := source().([]byte)
					var intoResponseHeader425 fasthttp.ResponseHeader
					intoResponseHeader425.AddBytesK(fromByte474, "")
					sink(intoResponseHeader425) // $taintSink
				}
				{
					fromString498 := source().(string)
					var intoResponseHeader977 fasthttp.ResponseHeader
					intoResponseHeader977.AddBytesK(nil, fromString498)
					sink(intoResponseHeader977) // $taintSink
				}
			}
			// func (*ResponseHeader).AddBytesKV(key []byte, value []byte)
			{
				{
					fromByte368 := source().([]byte)
					var intoResponseHeader324 fasthttp.ResponseHeader
					intoResponseHeader324.AddBytesKV(fromByte368, nil)
					sink(intoResponseHeader324) // $taintSink
				}
				{
					fromByte724 := source().([]byte)
					var intoResponseHeader665 fasthttp.ResponseHeader
					intoResponseHeader665.AddBytesKV(nil, fromByte724)
					sink(intoResponseHeader665) // $taintSink
				}
			}
			// func (*ResponseHeader).AddBytesV(key string, value []byte)
			{
				{
					fromString678 := source().(string)
					var intoResponseHeader917 fasthttp.ResponseHeader
					intoResponseHeader917.AddBytesV(fromString678, nil)
					sink(intoResponseHeader917) // $taintSink
				}
				{
					fromByte404 := source().([]byte)
					var intoResponseHeader157 fasthttp.ResponseHeader
					intoResponseHeader157.AddBytesV("", fromByte404)
					sink(intoResponseHeader157) // $taintSink
				}
			}
			// func (*ResponseHeader).AppendBytes(dst []byte) []byte
			{
				{
					fromResponseHeader684 := source().(fasthttp.ResponseHeader)
					var intoByte981 []byte
					fromResponseHeader684.AppendBytes(intoByte981)
					sink(intoByte981) // $taintSink
				}
				{
					fromResponseHeader644 := source().(fasthttp.ResponseHeader)
					intoByte583 := fromResponseHeader644.AppendBytes(nil)
					sink(intoByte583) // $taintSink
				}
				{
					fromByte415 := source().([]byte)
					var mediumObjCQL fasthttp.ResponseHeader
					intoByte751 := mediumObjCQL.AppendBytes(fromByte415)
					sink(intoByte751) // $taintSink
				}
			}
			// func (*ResponseHeader).ContentType() []byte
			{
				fromResponseHeader591 := source().(fasthttp.ResponseHeader)
				intoByte398 := fromResponseHeader591.ContentType()
				sink(intoByte398) // $taintSink
			}
			// func (*ResponseHeader).Cookie(cookie *Cookie) bool
			{
				fromResponseHeader605 := source().(fasthttp.ResponseHeader)
				var intoCookie483 *fasthttp.Cookie
				fromResponseHeader605.Cookie(intoCookie483)
				sink(intoCookie483) // $taintSink
			}
			// func (*ResponseHeader).CopyTo(dst *ResponseHeader)
			{
				fromResponseHeader812 := source().(fasthttp.ResponseHeader)
				var intoResponseHeader355 *fasthttp.ResponseHeader
				fromResponseHeader812.CopyTo(intoResponseHeader355)
				sink(intoResponseHeader355) // $taintSink
			}
			// func (*ResponseHeader).Header() []byte
			{
				fromResponseHeader113 := source().(fasthttp.ResponseHeader)
				intoByte268 := fromResponseHeader113.Header()
				sink(intoByte268) // $taintSink
			}
			// func (*ResponseHeader).Peek(key string) []byte
			{
				fromResponseHeader418 := source().(fasthttp.ResponseHeader)
				intoByte188 := fromResponseHeader418.Peek("")
				sink(intoByte188) // $taintSink
			}
			// func (*ResponseHeader).PeekBytes(key []byte) []byte
			{
				fromResponseHeader346 := source().(fasthttp.ResponseHeader)
				intoByte648 := fromResponseHeader346.PeekBytes(nil)
				sink(intoByte648) // $taintSink
			}
			// func (*ResponseHeader).PeekCookie(key string) []byte
			{
				fromResponseHeader901 := source().(fasthttp.ResponseHeader)
				intoByte527 := fromResponseHeader901.PeekCookie("")
				sink(intoByte527) // $taintSink
			}
			// func (*ResponseHeader).Read(r *bufio.Reader) error
			{
				fromReader210 := source().(*bufio.Reader)
				var intoResponseHeader202 fasthttp.ResponseHeader
				intoResponseHeader202.Read(fromReader210)
				sink(intoResponseHeader202) // $taintSink
			}
			// func (*ResponseHeader).Server() []byte
			{
				fromResponseHeader748 := source().(fasthttp.ResponseHeader)
				intoByte547 := fromResponseHeader748.Server()
				sink(intoByte547) // $taintSink
			}
			// func (*ResponseHeader).Set(key string, value string)
			{
				{
					fromString930 := source().(string)
					var intoResponseHeader565 fasthttp.ResponseHeader
					intoResponseHeader565.Set(fromString930, "")
					sink(intoResponseHeader565) // $taintSink
				}
				{
					fromString871 := source().(string)
					var intoResponseHeader351 fasthttp.ResponseHeader
					intoResponseHeader351.Set("", fromString871)
					sink(intoResponseHeader351) // $taintSink
				}
			}
			// func (*ResponseHeader).SetBytesK(key []byte, value string)
			{
				{
					fromByte884 := source().([]byte)
					var intoResponseHeader358 fasthttp.ResponseHeader
					intoResponseHeader358.SetBytesK(fromByte884, "")
					sink(intoResponseHeader358) // $taintSink
				}
				{
					fromString288 := source().(string)
					var intoResponseHeader119 fasthttp.ResponseHeader
					intoResponseHeader119.SetBytesK(nil, fromString288)
					sink(intoResponseHeader119) // $taintSink
				}
			}
			// func (*ResponseHeader).SetBytesKV(key []byte, value []byte)
			{
				{
					fromByte729 := source().([]byte)
					var intoResponseHeader624 fasthttp.ResponseHeader
					intoResponseHeader624.SetBytesKV(fromByte729, nil)
					sink(intoResponseHeader624) // $taintSink
				}
				{
					fromByte391 := source().([]byte)
					var intoResponseHeader899 fasthttp.ResponseHeader
					intoResponseHeader899.SetBytesKV(nil, fromByte391)
					sink(intoResponseHeader899) // $taintSink
				}
			}
			// func (*ResponseHeader).SetBytesV(key string, value []byte)
			{
				{
					fromString985 := source().(string)
					var intoResponseHeader812 fasthttp.ResponseHeader
					intoResponseHeader812.SetBytesV(fromString985, nil)
					sink(intoResponseHeader812) // $taintSink
				}
				{
					fromByte406 := source().([]byte)
					var intoResponseHeader249 fasthttp.ResponseHeader
					intoResponseHeader249.SetBytesV("", fromByte406)
					sink(intoResponseHeader249) // $taintSink
				}
			}
			// func (*ResponseHeader).SetCanonical(key []byte, value []byte)
			{
				{
					fromByte571 := source().([]byte)
					var intoResponseHeader722 fasthttp.ResponseHeader
					intoResponseHeader722.SetCanonical(fromByte571, nil)
					sink(intoResponseHeader722) // $taintSink
				}
				{
					fromByte441 := source().([]byte)
					var intoResponseHeader506 fasthttp.ResponseHeader
					intoResponseHeader506.SetCanonical(nil, fromByte441)
					sink(intoResponseHeader506) // $taintSink
				}
			}
			// func (*ResponseHeader).SetContentType(contentType string)
			{
				fromString680 := source().(string)
				var intoResponseHeader815 fasthttp.ResponseHeader
				intoResponseHeader815.SetContentType(fromString680)
				sink(intoResponseHeader815) // $taintSink
			}
			// func (*ResponseHeader).SetContentTypeBytes(contentType []byte)
			{
				fromByte485 := source().([]byte)
				var intoResponseHeader720 fasthttp.ResponseHeader
				intoResponseHeader720.SetContentTypeBytes(fromByte485)
				sink(intoResponseHeader720) // $taintSink
			}
			// func (*ResponseHeader).SetCookie(cookie *Cookie)
			{
				fromCookie656 := source().(*fasthttp.Cookie)
				var intoResponseHeader188 fasthttp.ResponseHeader
				intoResponseHeader188.SetCookie(fromCookie656)
				sink(intoResponseHeader188) // $taintSink
			}
			// func (*ResponseHeader).SetServer(server string)
			{
				fromString840 := source().(string)
				var intoResponseHeader311 fasthttp.ResponseHeader
				intoResponseHeader311.SetServer(fromString840)
				sink(intoResponseHeader311) // $taintSink
			}
			// func (*ResponseHeader).SetServerBytes(server []byte)
			{
				fromByte244 := source().([]byte)
				var intoResponseHeader231 fasthttp.ResponseHeader
				intoResponseHeader231.SetServerBytes(fromByte244)
				sink(intoResponseHeader231) // $taintSink
			}
			// func (*ResponseHeader).String() string
			{
				fromResponseHeader133 := source().(fasthttp.ResponseHeader)
				intoString586 := fromResponseHeader133.String()
				sink(intoString586) // $taintSink
			}
			// func (*ResponseHeader).Write(w *bufio.Writer) error
			{
				fromResponseHeader440 := source().(fasthttp.ResponseHeader)
				var intoWriter477 *bufio.Writer
				fromResponseHeader440.Write(intoWriter477)
				sink(intoWriter477) // $taintSink
			}
			// func (*ResponseHeader).WriteTo(w io.Writer) (int64, error)
			{
				fromResponseHeader666 := source().(fasthttp.ResponseHeader)
				var intoWriter547 io.Writer
				fromResponseHeader666.WriteTo(intoWriter547)
				sink(intoWriter547) // $taintSink
			}
		}
		// Taint-tracking through method calls on github.com/valyala/fasthttp.URI.
		{
			// func (*URI).AppendBytes(dst []byte) []byte
			{
				{
					fromURI115 := source().(fasthttp.URI)
					var intoByte357 []byte
					fromURI115.AppendBytes(intoByte357)
					sink(intoByte357) // $taintSink
				}
				{
					fromURI662 := source().(fasthttp.URI)
					intoByte569 := fromURI662.AppendBytes(nil)
					sink(intoByte569) // $taintSink
				}
				{
					fromByte592 := source().([]byte)
					var mediumObjCQL fasthttp.URI
					intoByte378 := mediumObjCQL.AppendBytes(fromByte592)
					sink(intoByte378) // $taintSink
				}
			}
			// func (*URI).CopyTo(dst *URI)
			{
				fromURI759 := source().(fasthttp.URI)
				var intoURI982 *fasthttp.URI
				fromURI759.CopyTo(intoURI982)
				sink(intoURI982) // $taintSink
			}
			// func (*URI).FullURI() []byte
			{
				fromURI939 := source().(fasthttp.URI)
				intoByte867 := fromURI939.FullURI()
				sink(intoByte867) // $taintSink
			}
			// func (*URI).Hash() []byte
			{
				fromURI418 := source().(fasthttp.URI)
				intoByte378 := fromURI418.Hash()
				sink(intoByte378) // $taintSink
			}
			// func (*URI).Host() []byte
			{
				fromURI880 := source().(fasthttp.URI)
				intoByte803 := fromURI880.Host()
				sink(intoByte803) // $taintSink
			}
			// func (*URI).LastPathSegment() []byte
			{
				fromURI141 := source().(fasthttp.URI)
				intoByte329 := fromURI141.LastPathSegment()
				sink(intoByte329) // $taintSink
			}
			// func (*URI).Parse(host []byte, uri []byte) error
			{
				{
					fromByte413 := source().([]byte)
					var intoURI456 fasthttp.URI
					intoURI456.Parse(fromByte413, nil)
					sink(intoURI456) // $taintSink
				}
				{
					fromByte953 := source().([]byte)
					var intoURI253 fasthttp.URI
					intoURI253.Parse(nil, fromByte953)
					sink(intoURI253) // $taintSink
				}
			}
			// func (*URI).Password() []byte
			{
				fromURI265 := source().(fasthttp.URI)
				intoByte525 := fromURI265.Password()
				sink(intoByte525) // $taintSink
			}
			// func (*URI).Path() []byte
			{
				fromURI755 := source().(fasthttp.URI)
				intoByte931 := fromURI755.Path()
				sink(intoByte931) // $taintSink
			}
			// func (*URI).PathOriginal() []byte
			{
				fromURI581 := source().(fasthttp.URI)
				intoByte499 := fromURI581.PathOriginal()
				sink(intoByte499) // $taintSink
			}
			// func (*URI).QueryArgs() *Args
			{
				fromURI872 := source().(fasthttp.URI)
				intoArgs359 := fromURI872.QueryArgs()
				sink(intoArgs359) // $taintSink
			}
			// func (*URI).QueryString() []byte
			{
				fromURI881 := source().(fasthttp.URI)
				intoByte522 := fromURI881.QueryString()
				sink(intoByte522) // $taintSink
			}
			// func (*URI).RequestURI() []byte
			{
				fromURI922 := source().(fasthttp.URI)
				intoByte592 := fromURI922.RequestURI()
				sink(intoByte592) // $taintSink
			}
			// func (*URI).Scheme() []byte
			{
				fromURI288 := source().(fasthttp.URI)
				intoByte276 := fromURI288.Scheme()
				sink(intoByte276) // $taintSink
			}
			// func (*URI).SetHash(hash string)
			{
				fromString772 := source().(string)
				var intoURI381 fasthttp.URI
				intoURI381.SetHash(fromString772)
				sink(intoURI381) // $taintSink
			}
			// func (*URI).SetHashBytes(hash []byte)
			{
				fromByte632 := source().([]byte)
				var intoURI373 fasthttp.URI
				intoURI373.SetHashBytes(fromByte632)
				sink(intoURI373) // $taintSink
			}
			// func (*URI).SetHost(host string)
			{
				fromString384 := source().(string)
				var intoURI281 fasthttp.URI
				intoURI281.SetHost(fromString384)
				sink(intoURI281) // $taintSink
			}
			// func (*URI).SetHostBytes(host []byte)
			{
				fromByte445 := source().([]byte)
				var intoURI600 fasthttp.URI
				intoURI600.SetHostBytes(fromByte445)
				sink(intoURI600) // $taintSink
			}
			// func (*URI).SetPassword(password string)
			{
				fromString848 := source().(string)
				var intoURI401 fasthttp.URI
				intoURI401.SetPassword(fromString848)
				sink(intoURI401) // $taintSink
			}
			// func (*URI).SetPasswordBytes(password []byte)
			{
				fromByte125 := source().([]byte)
				var intoURI343 fasthttp.URI
				intoURI343.SetPasswordBytes(fromByte125)
				sink(intoURI343) // $taintSink
			}
			// func (*URI).SetPath(path string)
			{
				fromString398 := source().(string)
				var intoURI982 fasthttp.URI
				intoURI982.SetPath(fromString398)
				sink(intoURI982) // $taintSink
			}
			// func (*URI).SetPathBytes(path []byte)
			{
				fromByte344 := source().([]byte)
				var intoURI583 fasthttp.URI
				intoURI583.SetPathBytes(fromByte344)
				sink(intoURI583) // $taintSink
			}
			// func (*URI).SetQueryString(queryString string)
			{
				fromString387 := source().(string)
				var intoURI184 fasthttp.URI
				intoURI184.SetQueryString(fromString387)
				sink(intoURI184) // $taintSink
			}
			// func (*URI).SetQueryStringBytes(queryString []byte)
			{
				fromByte585 := source().([]byte)
				var intoURI586 fasthttp.URI
				intoURI586.SetQueryStringBytes(fromByte585)
				sink(intoURI586) // $taintSink
			}
			// func (*URI).SetScheme(scheme string)
			{
				fromString372 := source().(string)
				var intoURI986 fasthttp.URI
				intoURI986.SetScheme(fromString372)
				sink(intoURI986) // $taintSink
			}
			// func (*URI).SetSchemeBytes(scheme []byte)
			{
				fromByte312 := source().([]byte)
				var intoURI955 fasthttp.URI
				intoURI955.SetSchemeBytes(fromByte312)
				sink(intoURI955) // $taintSink
			}
			// func (*URI).SetUsername(username string)
			{
				fromString131 := source().(string)
				var intoURI227 fasthttp.URI
				intoURI227.SetUsername(fromString131)
				sink(intoURI227) // $taintSink
			}
			// func (*URI).SetUsernameBytes(username []byte)
			{
				fromByte357 := source().([]byte)
				var intoURI141 fasthttp.URI
				intoURI141.SetUsernameBytes(fromByte357)
				sink(intoURI141) // $taintSink
			}
			// func (*URI).String() string
			{
				fromURI270 := source().(fasthttp.URI)
				intoString814 := fromURI270.String()
				sink(intoString814) // $taintSink
			}
			// func (*URI).Update(newURI string)
			{
				fromString139 := source().(string)
				var intoURI509 fasthttp.URI
				intoURI509.Update(fromString139)
				sink(intoURI509) // $taintSink
			}
			// func (*URI).UpdateBytes(newURI []byte)
			{
				fromByte127 := source().([]byte)
				var intoURI835 fasthttp.URI
				intoURI835.UpdateBytes(fromByte127)
				sink(intoURI835) // $taintSink
			}
			// func (*URI).Username() []byte
			{
				fromURI261 := source().(fasthttp.URI)
				intoByte921 := fromURI261.Username()
				sink(intoByte921) // $taintSink
			}
			// func (*URI).WriteTo(w io.Writer) (int64, error)
			{
				fromURI270 := source().(fasthttp.URI)
				var intoWriter615 io.Writer
				fromURI270.WriteTo(intoWriter615)
				sink(intoWriter615) // $taintSink
			}
		}
	}
	// Taint-tracking through interface method calls.
	{
		// Taint-tracking through method calls on github.com/valyala/fasthttp.Logger interface.
		{
			// func (Logger).Printf(format string, args ...interface{})
			{
				{
					fromString305 := source().(string)
					var intoLogger805 fasthttp.Logger
					intoLogger805.Printf(fromString305, nil)
					sink(intoLogger805) // $taintSink
				}
				{
					fromInterface550 := source().(interface{})
					var intoLogger281 fasthttp.Logger
					intoLogger281.Printf("", fromInterface550)
					sink(intoLogger281) // $taintSink
				}
			}
		}
	}
}
